import os
import xml.etree.ElementTree

BENIGN_DIR = '/mnt/ssd/dku-apk/dku1000_decoded/benign'
MALWARE_DIR = '/mnt/ssd/dku-apk/dku1000_decoded/malware'




def extract_perm(apk):
    filepath = os.path.join(apk, 'AndroidManifest.xml')
    str = ""
    tree = xml.etree.ElementTree.parse(filepath)
    root = tree.getroot()
    for ele in root.iter("uses-permission"):
        for k in ele.attrib.keys():
            if 'name' in k:
                str += ele.attrib[k] + ' '
    return str


def extract_intent(apk):
    filepath = os.path.join(apk, 'AndroidManifest.xml')
    str = ""
    tree = xml.etree.ElementTree.parse(filepath)
    root = tree.getroot()
    for ele in root.iter("intent-filter"):
        for node in ele.findall('action'):
            for k in node.attrib.keys():
                if 'name' in k:
                    str += node.attrib[k] + ' '
    return str


from sklearn.model_selection import *
from sklearn.feature_extraction.text import *
from sklearn.ensemble import *
from sklearn.neural_network import *
from sklearn.metrics import *


TRAINING_SET_RATIO = 0.70


def display_results(y_test, y_pred):
    print('Accuracy {:.3f}'.format(accuracy_score(y_test, y_pred)))
    print(confusion_matrix(y_test, y_pred))


def main():
    X_all = []
    y_all = []

    for fname in os.listdir(BENIGN_DIR):
        apk = os.path.join(BENIGN_DIR, fname)
        X_all.append(extract_perm(apk))
        y_all.append(0)

    for fname in os.listdir(MALWARE_DIR):
        apk = os.path.join(MALWARE_DIR, fname)
        X_all.append(extract_perm(apk))
        y_all.append(1)

    # split X_all into training and test data
    X_train, X_test, y_train, y_test = train_test_split(
        X_all, y_all, train_size=TRAINING_SET_RATIO, random_state=2)

    # generate BoW
    vectorizer = CountVectorizer(lowercase=False, token_pattern=r"\S+")
    X_train_vector = vectorizer.fit_transform(X_train)
    X_test_vector = vectorizer.transform(X_test)
    features = vectorizer.get_feature_names_out()
    print("Total {} features".format(len(features)))

    # GBM
    print("\nGBM classifier:")
    clf = GradientBoostingClassifier()
    clf.fit(X_train_vector, y_train)
    y_pred = clf.predict(X_test_vector)
    display_results(y_test, y_pred)

    # Adaboost
    print("\nAdaBoost Classifier:")
    clf = AdaBoostClassifier()
    clf.fit(X_train_vector, y_train)
    y_pred = clf.predict(X_test_vector)
    display_results(y_test, y_pred)

    # Random Forest
    print("\nRandom Forest Classifier:")
    clf = RandomForestClassifier()
    clf.fit(X_train_vector, y_train)
    y_pred = clf.predict(X_test_vector)
    display_results(y_test, y_pred)

    # MLP
    print("\nMLP Classifier:")
    clf = MLPClassifier(max_iter=1000)
    clf.fit(X_train_vector, y_train)
    y_pred = clf.predict(X_test_vector)
    display_results(y_test, y_pred)


if __name__ == "__main__":
    main()
