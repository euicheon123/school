import os
import xml.etree.ElementTree as ET
import zipfile
import re
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

BENIGN_DIR = '/mnt/ssd/dku-apk/dku1000_decoded/benign'
MALWARE_DIR = '/mnt/ssd/dku-apk/dku1000_decoded/malware'

# List of suspicious permissions
SUSPICIOUS_PERMISSIONS = ["huawei", "WITHOUT_NOTIFICATION", "xiaomi"]

# List of dangerous APIs and suspicious strings in smali code
DANGEROUS_APIS = ["Ljavax/crypto", "Ljava/net/Socket"]

def extract_permissions(apk):
    filepath = os.path.join(apk, 'AndroidManifest.xml')
    permissions = []
    tree = ET.parse(filepath)
    root = tree.getroot()
    for ele in root.iter("uses-permission"):
        for k in ele.attrib.keys():
            if 'name' in k:
                permission = ele.attrib[k].split('.')[-1]  # Get the last part after the dot
                permissions.append(permission)
    return permissions

def check_suspicious_permissions(permissions):
    return any(perm in SUSPICIOUS_PERMISSIONS for perm in permissions)

def extract_smali(apk):
    smali_dir = os.path.join(apk, 'smali')
    url_pattern = re.compile(
        r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')
    ip_pattern = re.compile(
        r'\b(?:\d{1,3}\.){3}\d{1,3}\b')
    
    for root, dirs, files in os.walk(smali_dir):
        for file in files:
            if file.endswith('.smali'):
                file_path = os.path.join(root, file)
                with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                    smali_code = f.read()
                    # Search for URLs and IP addresses
                    if url_pattern.search(smali_code) or ip_pattern.search(smali_code):
                        return True  # Found hardcoded URL or IP address
    return False

def check_encrypted_resources(apk):
    # Assuming encryption can be detected by file extension or other means
    encrypted_extensions = ['.enc', '.crypt']
    for root, dirs, files in os.walk(apk):
        for file in files:
            if any(file.endswith(ext) for ext in encrypted_extensions):
                return True
    return False

def check_suspicious_libraries(apk):
    # Assuming libraries are stored in the 'lib' directory of the APK
    lib_dir = os.path.join(apk, 'lib')
    if os.path.exists(lib_dir):
        return True
    return False

def detect_malware(apk_path):
    # Use the provided functions to check for each of the suspicious characteristics
    permissions = extract_permissions(apk_path)
    if check_suspicious_permissions(permissions):
        return False  # Flagged by suspicious permissions
    if extract_smali(apk_path):
        return False  # Flagged by smali analysis (URLs/IPs)
    if check_encrypted_resources(apk_path):
        return False  # Flagged by presence of encrypted resources
    if check_suspicious_libraries(apk_path):
        return True  # Flagged by presence of suspicious libraries
    return False  # None of the checks flagged the APK as malware
  
  
def evaluate_detection(benign_dir, malware_dir):
    # True labels and predictions
    true_labels = []
    predicted_labels = []

    # Check benign APKs
    for benign_apk in os.listdir(benign_dir):
        apk_path = os.path.join(benign_dir, benign_apk)
        true_labels.append(0)  # 0 for benign
        predicted_labels.append(int(detect_malware(apk_path)))

    # Check malware APKs
    for malware_apk in os.listdir(malware_dir):
        apk_path = os.path.join(malware_dir, malware_apk)
        true_labels.append(1)  # 1 for malware
        predicted_labels.append(int(detect_malware(apk_path)))

    # Calculate metrics
    accuracy = accuracy_score(true_labels, predicted_labels)
    precision = precision_score(true_labels, predicted_labels)
    recall = recall_score(true_labels, predicted_labels)
    f1 = f1_score(true_labels, predicted_labels)

    return accuracy, precision, recall, f1

# Evaluate the detection
accuracy, precision, recall, f1 = evaluate_detection(BENIGN_DIR, MALWARE_DIR)
print(f"Accuracy: {accuracy}")
print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"F1 Score: {f1}")
